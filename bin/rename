#!/usr/bin/env ruby
# -*- ruby -*-
# Author: William (B.J.) Snow Orvis
#
# == Synopsis
# Renames all files specified by matching a regular expression
# to their name.
#
# == Usage
# rename [-p|--pretend] before_pattern after_pattern [files ...]
#
# before_pattern:
#     Match first occurence of this pattern in each of files.
#     Example: '.' matches the first character
#
# after_pattern:
#     Replace before_pattern match in each filename with this.
#     Example: '\0a' appends an 'a' after the matched before_pattern.
#
# files:
#     One or more filenames to apply the match and replace to.
#
# === Options
#
# -p --pretend:
#     Print how the file names would change rather than actually doing it.
# -h --help:
#     This help

require 'getoptlong'

def usage
  require 'rdoc/usage'
  RDoc::usage('Synopsis','Usage','Options')
end

print_action = false
do_action = true

usage if ARGV.length == 0

opts = GetoptLong.new(
  [ '--help', '-h', GetoptLong::NO_ARGUMENT ],
  [ '--pretend', '-p', GetoptLong::NO_ARGUMENT ],
  [ '--verbose', '-v', GetoptLong::NO_ARGUMENT ]
)

opts.each do |opt, arg|
  case opt
  when '--help'
    usage
  when '--verbose'
    print_action = true
  when '--pretend'
    print_action = true
    do_action = false
  end
end

match_pat = Regexp.new(ARGV.shift)
replace_pat = ARGV.shift

puts "I would do the following renames without --pretend/-p:" if not do_action and print_action

ARGV.each do |oldname|
  newname = oldname.sub(match_pat, replace_pat)

  puts "#{oldname} => #{newname}" if print_action
  File.rename(oldname, newname) if do_action
end

