#!/usr/bin/env ruby
#--
# (MIT License)
#
# Copyright (c) 2009 William Snow Orvis
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# 'Software'), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#++
# == Synopsis
# Renames all files specified by matching a regular expression
# to their name.
#
# == Usage
# rename [options] before_pattern after_pattern [files ...]
#
# before_pattern:: Match first occurrence of this pattern in each of files.
#                  Example: '.' matches the first character
# after_pattern::  Replace before_pattern match in each filename with this.
#                  Example: '\0a' appends an 'a' after the matched
#                  before_pattern.
# files::          One or more filenames to apply the match and replace to.
#
# === Options
#
# -h --help::           This help
# -p --pretend::        Print how the file names would change rather than
#                       actually doing it.
# -s X --tmp-suffix X:: Set the temporary rename suffix to *X* (default of
#                       `.rename.tmp')
# -v --verbose::        Print each rename in the order it happens.

require 'getoptlong'

def usage
  require 'rdoc/usage'
  RDoc::usage('Synopsis','Usage','Options')
end

print_action = false
do_action = true
tmpsuffix='.rename.tmp'

usage if ARGV.length == 0

opts = GetoptLong.new(
  [ '--help', '-h', GetoptLong::NO_ARGUMENT ],
  [ '--pretend', '-p', GetoptLong::NO_ARGUMENT ],
  [ '--tmp-suffix', '-s', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--verbose', '-v', GetoptLong::NO_ARGUMENT ]
)

opts.each do |opt, arg|
  case opt
  when '--help'
    usage
  when '--verbose'
    print_action = true
  when '--tmp-suffix'
    tmpsuffix = arg.to_s
  when '--pretend'
    print_action = true
    do_action = false
  end
end

match_pat = Regexp.new(ARGV.shift)
replace_pat = ARGV.shift

puts "I would do the following renames without --pretend/-p:" if not do_action and print_action

oldnames = ARGV
newnames = oldnames.map { |oldname| oldname.sub(match_pat, replace_pat) }

# first pass. rename a file to its new name unless it may overwrite another one
# that might be renamed later, in which case rename it to a temporary name.
tmpnames = []
oldnames.each_index do |i|
  if oldnames.include? newnames[i]
    tmpnames[i] = "#{oldnames[i]}#{tmpsuffix}"
    puts "#{oldnames[i]} => #{tmpnames[i]}" if print_action
    File.rename(oldnames[i], tmpnames[i]) if do_action
  else
    puts "#{oldnames[i]} => #{newnames[i]}" if print_action
    File.rename(oldnames[i], newnames[i]) if do_action
  end
end

# second pass. rename files that have been temporarily renamed to their new
# name.
tmpnames.each_index do |i|
  if tmpnames[i] != nil
    puts "#{tmpnames[i]} => #{newnames[i]}" if print_action
    File.rename(tmpnames[i], newnames[i]) if do_action
  end
end

